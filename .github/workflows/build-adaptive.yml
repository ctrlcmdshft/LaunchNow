name: Build LaunchNow (Adaptive)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  SCHEME_NAME: 'LaunchNow'
  CONFIGURATION: 'Release'

jobs:
  build:
    name: Adaptive Build
    runs-on: macos-latest  # Use latest available macOS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect and setup Xcode
      run: |
        echo "=== Xcode Detection ==="
        echo "Available Xcode installations:"
        ls /Applications/ | grep -i xcode || echo "No Xcode found in /Applications"
        
        # Try to find the newest Xcode version
        NEWEST_XCODE=$(ls /Applications/ | grep -E "Xcode.*\.app$" | sort -V | tail -1)
        if [ -n "$NEWEST_XCODE" ]; then
          echo "Using: $NEWEST_XCODE"
          sudo xcode-select -s "/Applications/$NEWEST_XCODE/Contents/Developer"
        else
          echo "Using default Xcode"
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        fi
        
        echo "=== Xcode Version ==="
        xcodebuild -version
        
        echo "=== Developer Tools ==="
        xcode-select -p
        
    - name: Check project format compatibility
      id: check_project
      run: |
        echo "=== Project Compatibility Check ==="
        if xcodebuild -list -project LaunchNow.xcodeproj 2>&1; then
          echo "compatible=true" >> $GITHUB_OUTPUT
          echo "✅ Project format is compatible with current Xcode"
        else
          echo "compatible=false" >> $GITHUB_OUTPUT
          echo "❌ Project format may be incompatible"
          echo "This could be due to:"
          echo "1. Project created with newer Xcode version"
          echo "2. Missing project files"
          echo "3. Corrupted project structure"
        fi
        
    - name: Show project information (if compatible)
      if: steps.check_project.outputs.compatible == 'true'
      run: |
        echo "=== Project Information ==="
        xcodebuild -list -project LaunchNow.xcodeproj
        
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-adaptive-derived-data-${{ hashFiles('**/*.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-adaptive-derived-data-
          ${{ runner.os }}-derived-data-
          
    - name: Build app (if compatible)
      if: steps.check_project.outputs.compatible == 'true'
      run: |
        echo "=== Building LaunchNow ==="
        xcodebuild build \
          -project LaunchNow.xcodeproj \
          -scheme ${{ env.SCHEME_NAME }} \
          -configuration ${{ env.CONFIGURATION }} \
          -destination 'platform=macOS' \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -quiet
          
    - name: Create archive (if compatible)
      if: steps.check_project.outputs.compatible == 'true'
      run: |
        echo "=== Creating Archive ==="
        mkdir -p build
        xcodebuild archive \
          -project LaunchNow.xcodeproj \
          -scheme ${{ env.SCHEME_NAME }} \
          -configuration ${{ env.CONFIGURATION }} \
          -destination 'platform=macOS' \
          -archivePath build/LaunchNow.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -quiet
          
    - name: Create app bundle and DMG (if compatible)
      if: steps.check_project.outputs.compatible == 'true'
      run: |
        echo "=== Creating Distribution Files ==="
        
        # Create app bundle directory
        mkdir -p "build/LaunchNow"
        
        # Copy app from archive
        if [ -d "build/LaunchNow.xcarchive/Products/Applications/LaunchNow.app" ]; then
          cp -R "build/LaunchNow.xcarchive/Products/Applications/LaunchNow.app" "build/LaunchNow/"
          echo "✅ App bundle created successfully"
          
          # Create DMG
          hdiutil create \
            -volname "LaunchNow" \
            -srcfolder "build/LaunchNow" \
            -ov -format UDZO \
            "build/LaunchNow.dmg"
          echo "✅ DMG created successfully"
          
          # Create ZIP
          cd "build/LaunchNow"
          zip -r "../LaunchNow.zip" .
          cd ../..
          echo "✅ ZIP created successfully"
          
        else
          echo "❌ App bundle not found in archive"
          ls -la build/LaunchNow.xcarchive/Products/ || echo "Products directory not found"
        fi
        
    - name: Upload build artifacts (if compatible)
      if: steps.check_project.outputs.compatible == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: LaunchNow-Build-${{ github.sha }}
        path: |
          build/LaunchNow.dmg
          build/LaunchNow.zip
          build/LaunchNow.xcarchive
        retention-days: 30
        
    - name: Project incompatibility summary
      if: steps.check_project.outputs.compatible == 'false'
      run: |
        echo "=== Build Failed - Project Incompatibility ==="
        echo ""
        echo "The LaunchNow project cannot be built with the available Xcode version."
        echo ""
        echo "Possible solutions:"
        echo "1. Update the GitHub Actions runner to use a newer macOS version"
        echo "2. Downgrade the Xcode project format in your local Xcode"
        echo "3. Use Xcode Cloud instead of GitHub Actions"
        echo "4. Set up a self-hosted runner with compatible Xcode"
        echo ""
        echo "Current runner: $(sw_vers -productName) $(sw_vers -productVersion)"
        echo "Available Xcode: $(xcodebuild -version)"
        echo ""
        exit 1